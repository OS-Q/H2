name: QCD

on:
  push:
    branches:
      - qio
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"

env:
  UPLOAD_BUILD: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        example:
          - "native-blink"
          - "spl-blink"
          - "spl-flash"
          - "spl-uart-loopback"
          - "spl-uart-simple-printf"
          - "arduino-fade-all-pins"
          - "arduino-internal-lib"
          - "arduino-ping-hc04"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -U https://github.com/OS-Q/M03/releases/latest/download/qio.zip
          qio platform install file://.

      - name: Build
        working-directory: examples
        run: |
          qio run -d ${{ matrix.example }}

      - name: Upload
        if: env.UPLOAD_BUILD
        uses: actions/upload-artifact@v2
        with:
          name: qio_${{ matrix.example }}_${{ matrix.os }}
          path: examples/${{ matrix.example }}/.pio/build

  release:
    needs:
      - build
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: clone
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: Package
        id: package
        run: |
          zip -r P14L.zip boards extend misc link.json link.py
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload Firmware
        if: steps.package.outputs.status == 'success' && !cancelled()
        uses: actions/upload-artifact@v2
        with:
          name: P14
          path: ${{ env.FIRMWARE }}/P14L.zip

      - name: Setup OSS
        uses: Qful/ossutil-action@master
        with:
          endpoint: ${{ secrets.OSS_ENDPOINT }}
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}

      - name: Upload OSS
        id: OSS
        run: |
          ossutil cp ${{ env.FIRMWARE }}/P14L.zip ${{ secrets.OSS_P_BUCKET }} -rf
          echo "::set-output name=status::success"
